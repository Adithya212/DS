#include<stdio.h>
#include<ctype.h>
char s[50];
int top=-1;

void removeSpace(char *source)
{
    char *i=source;
    char *j=source;
    while (*j!=0)
    {
        *i=*j++;
        if(*i!=' ')
        {
            *i++;
        
        }
           
  
        
    }
    *i=0;
}
void push(char element)
{
    s[++top]=element;
}

int pop()
{
     return s[top--];
}

int precedence(char ele)
{
    switch(ele)
    {
       case '#':
        return 0;
       case '(':
        return 1;
       case ')':
        return 2;
       case '+':
       case '-':
        return 3;
       case '*':
       case '/':
        return 4;
    }
}

void inTopo(char *infix,char *postfix)
{
    char ch,ele;
    int i=0,j=0;
    push('#');
    while ((ch=infix[i++])!='\n')
    {       
        if(ch=='(')
            push(ch);
        else if(ch==')')
          {

              while((ch=s[top])!='(')
                postfix[j++]=pop();
              ele=pop();
          }  
        else if(isalnum(ch))
            postfix[j++]=ch;
        else 
        {
            while (precedence(ch)<=precedence(s[top]))
            {
                postfix[j++]=pop();
            }
            push(ch);
            
        }
        
    }
    while (s[top]!='#')
    {
        postfix[j++]=pop();
    }
    postfix[j]=0;
     
    
}
int eval(char * postfix)
{
    int op1,op2,i=0;
    char ch;
    while ((ch=postfix[i++])!=0)
    {
          
    if (isdigit(ch))
    {
        push(ch-'0');
    }
    else
    {
        op1=pop();
        op2=pop();
        switch (ch)
        {
        case '+':
            push(op1+op2);
            break;
        case '-':
            push(op2-op1);
            break;
        case '*':
            push(op2*op1);
            break;
        case '/':


            push(op2/op1);
            break;
        case '^':
            push(op2^op1);
            break;
        
        
        default:
            break;
        }
    }
   
    }
  
     return s[top];
}
void main()
{
    char inf[50],postf[50];
    int res;
    printf("Enter the expression");
    fgets(inf,50,stdin);
    removeSpace(inf);
    printf("infix is %s",inf);

    inTopo(inf,postf);
     printf("pfix exprerssionn  is :   %s",postf);
    
    top=-1;
    res=eval(postf);
    printf("\neval is  is:   %d",res);
    
}
